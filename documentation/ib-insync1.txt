API docs

Release 0.9.86.

Also see the official Python API documentation from IB.
IB

High-level interface to Interactive Brokers.

class ib_insync.ib.IB[source]

    Provides both a blocking and an asynchronous interface to the IB API, using asyncio networking and event loop.

    The IB class offers direct access to the current state, such as orders, executions, positions, tickers etc. This state is automatically kept in sync with the TWS/IBG application.

    This class has most request methods of EClient, with the same names and parameters (except for the reqId parameter which is not needed anymore). Request methods that return a result come in two versions:

        Blocking: Will block until complete and return the result. The current state will be kept updated while the request is ongoing;

        Asynchronous: All methods that have the “Async” postfix. Implemented as coroutines or methods that return a Future and intended for advanced users.

    The One Rule:

    While some of the request methods are blocking from the perspective of the user, the framework will still keep spinning in the background and handle all messages received from TWS/IBG. It is important to not block the framework from doing its work. If, for example, the user code spends much time in a calculation, or uses time.sleep() with a long delay, the framework will stop spinning, messages accumulate and things may go awry.

    The one rule when working with the IB class is therefore that

    user code may not block for too long.

    To be clear, the IB request methods are okay to use and do not count towards the user operation time, no matter how long the request takes to finish.

    So what is “too long”? That depends on the situation. If, for example, the timestamp of tick data is to remain accurate within a millisecond, then the user code must not spend longer than a millisecond. If, on the other extreme, there is very little incoming data and there is no desire for accurate timestamps, then the user code can block for hours.

    If a user operation takes a long time then it can be farmed out to a different process. Alternatively the operation can be made such that it periodically calls IB.sleep(0); This will let the framework handle any pending work and return when finished. The operation should be aware that the current state may have been updated during the sleep(0) call.

    For introducing a delay, never use time.sleep() but use sleep() instead.

    Parameters:

            RequestTimeout (float) – Timeout (in seconds) to wait for a blocking request to finish before raising asyncio.TimeoutError. The default value of 0 will wait indefinitely. Note: This timeout is not used for the *Async methods.

            RaiseRequestErrors (bool) –

            Specifies the behaviour when certain API requests fail:

                False: Silently return an empty result;

                True: Raise a RequestError.

            MaxSyncedSubAccounts (int) – Do not use sub-account updates if the number of sub-accounts exceeds this number (50 by default).

            TimezoneTWS (str) – Specifies what timezone TWS (or gateway) is using. The default is to assume local system timezone.

    Events:

            connectedEvent (): Is emitted after connecting and synchronzing with TWS/gateway.

            disconnectedEvent (): Is emitted after disconnecting from TWS/gateway.

            updateEvent (): Is emitted after a network packet has been handeled.

            pendingTickersEvent (tickers: Set[Ticker]): Emits the set of tickers that have been updated during the last update and for which there are new ticks, tickByTicks or domTicks.

            barUpdateEvent (bars: BarDataList, hasNewBar: bool): Emits the bar list that has been updated in real time. If a new bar has been added then hasNewBar is True, when the last bar has changed it is False.

            newOrderEvent (trade: Trade): Emits a newly placed trade.

            orderModifyEvent (trade: Trade): Emits when order is modified.

            cancelOrderEvent (trade: Trade): Emits a trade directly after requesting for it to be cancelled.

            openOrderEvent (trade: Trade): Emits the trade with open order.

            orderStatusEvent (trade: Trade): Emits the changed order status of the ongoing trade.

            execDetailsEvent (trade: Trade, fill: Fill): Emits the fill together with the ongoing trade it belongs to.

            commissionReportEvent (trade: Trade, fill: Fill, report: CommissionReport): The commission report is emitted after the fill that it belongs to.

            updatePortfolioEvent (item: PortfolioItem): A portfolio item has changed.

            positionEvent (position: Position): A position has changed.

            accountValueEvent (value: AccountValue): An account value has changed.

            accountSummaryEvent (value: AccountValue): An account value has changed.

            pnlEvent (entry: PnL): A profit- and loss entry is updated.

            pnlSingleEvent (entry: PnLSingle): A profit- and loss entry for a single position is updated.

            tickNewsEvent (news: NewsTick): Emit a new news headline.

            newsBulletinEvent (bulletin: NewsBulletin): Emit a new news bulletin.

            scannerDataEvent (data: ScanDataList): Emit data from a scanner subscription.

            wshMetaEvent (dataJson: str): Emit WSH metadata.

            wshEvent (dataJson: str): Emit WSH event data (such as earnings dates, dividend dates, options expiration dates, splits, spinoffs and conferences).

            errorEvent (reqId: int, errorCode: int, errorString: str, contract: Contract): Emits the reqId/orderId and TWS error code and string (see https://interactivebrokers.github.io/tws-api/message_codes.html) together with the contract the error applies to (or None if no contract applies).

            timeoutEvent (idlePeriod: float): Is emitted if no data is received for longer than the timeout period specified with setTimeout(). The value emitted is the period in seconds since the last update.

        Note that it is not advisable to place new requests inside an event handler as it may lead to too much recursion.

    events = ('connectedEvent', 'disconnectedEvent', 'updateEvent', 'pendingTickersEvent', 'barUpdateEvent', 'newOrderEvent', 'orderModifyEvent', 'cancelOrderEvent', 'openOrderEvent', 'orderStatusEvent', 'execDetailsEvent', 'commissionReportEvent', 'updatePortfolioEvent', 'positionEvent', 'accountValueEvent', 'accountSummaryEvent', 'pnlEvent', 'pnlSingleEvent', 'scannerDataEvent', 'tickNewsEvent', 'newsBulletinEvent', 'wshMetaEvent', 'wshEvent', 'errorEvent', 'timeoutEvent')

    RequestTimeout: float = 0

    RaiseRequestErrors: bool = False

    MaxSyncedSubAccounts: int = 50

    TimezoneTWS: str = ''

    connect(host='127.0.0.1', port=7497, clientId=1, timeout=4, readonly=False, account='', raiseSyncErrors=False)[source]

        Connect to a running TWS or IB gateway application. After the connection is made the client is fully synchronized and ready to serve requests.

        This method is blocking.

        Parameters:

                host (str) – Host name or IP address.

                port (int) – Port number.

                clientId (int) – ID number to use for this client; must be unique per connection. Setting clientId=0 will automatically merge manual TWS trading with this client.

                timeout (float) – If establishing the connection takes longer than timeout seconds then the asyncio.TimeoutError exception is raised. Set to 0 to disable timeout.

                readonly (bool) – Set to True when API is in read-only mode.

                account (str) – Main account to receive updates for.

                raiseSyncErrors (bool) – When True this will cause an initial sync request error to raise a ConnectionError`. When False the error will only be logged at error level.

    disconnect()[source]

        Disconnect from a TWS or IB gateway application. This will clear all session state.

    isConnected()[source]

        Is there an API connection to TWS or IB gateway?

        Return type:

            bool

    static run(*, timeout=None)

        By default run the event loop forever.

        When awaitables (like Tasks, Futures or coroutines) are given then run the event loop until each has completed and return their results.

        An optional timeout (in seconds) can be given that will raise asyncio.TimeoutError if the awaitables are not ready within the timeout period.

    static schedule(callback, *args)

        Schedule the callback to be run at the given time with the given arguments. This will return the Event Handle.

        Parameters:

                time (Union[time, datetime]) – Time to run callback. If given as datetime.time then use today as date.

                callback (Callable) – Callable scheduled to run.

                args – Arguments for to call callback with.

    static sleep()

        Wait for the given amount of seconds while everything still keeps processing in the background. Never use time.sleep().

        Parameters:

            secs (float) – Time in seconds to wait.
        Return type:

            bool

    static timeRange(end, step)

        Iterator that waits periodically until certain time points are reached while yielding those time points.

        Parameters:

                start (Union[time, datetime]) – Start time, can be specified as datetime.datetime, or as datetime.time in which case today is used as the date

                end (Union[time, datetime]) – End time, can be specified as datetime.datetime, or as datetime.time in which case today is used as the date

                step (float) – The number of seconds of each period

        Return type:

            Iterator[datetime]

    static timeRangeAsync(end, step)

        Async version of timeRange().

        Return type:

            AsyncIterator[datetime]

    static waitUntil()

        Wait until the given time t is reached.

        Parameters:

            t (Union[time, datetime]) – The time t can be specified as datetime.datetime, or as datetime.time in which case today is used as the date.
        Return type:

            bool

    waitOnUpdate(timeout=0)[source]

        Wait on any new update to arrive from the network.

        Parameters:

            timeout (float) – Maximum time in seconds to wait. If 0 then no timeout is used.

        Note

        A loop with waitOnUpdate should not be used to harvest tick data from tickers, since some ticks can go missing. This happens when multiple updates occur almost simultaneously; The ticks from the first update are then cleared. Use events instead to prevent this.

        Return type:

            bool
        Returns:

            True if not timed-out, False otherwise.

    loopUntil(condition=None, timeout=0)[source]

        Iterate until condition is met, with optional timeout in seconds. The yielded value is that of the condition or False when timed out.

        Parameters:

                condition – Predicate function that is tested after every network

                update. –

                timeout (float) – Maximum time in seconds to wait. If 0 then no timeout is used.

        Return type:

            Iterator[object]

    setTimeout(timeout=60)[source]

        Set a timeout for receiving messages from TWS/IBG, emitting timeoutEvent if there is no incoming data for too long.

        The timeout fires once per connected session but can be set again after firing or after a reconnect.

        Parameters:

            timeout (float) – Timeout in seconds.

    managedAccounts()[source]

        List of account names.

        Return type:

            List[str]

    accountValues(account='')[source]

        List of account values for the given account, or of all accounts if account is left blank.

        Parameters:

            account (str) – If specified, filter for this account name.
        Return type:

            List[AccountValue]

    accountSummary(account='')[source]

        List of account values for the given account, or of all accounts if account is left blank.

        This method is blocking on first run, non-blocking after that.

        Parameters:

            account (str) – If specified, filter for this account name.
        Return type:

            List[AccountValue]

    portfolio(account='')[source]

        List of portfolio items for the given account, or of all retrieved portfolio items if account is left blank.

        Parameters:

            account (str) – If specified, filter for this account name.
        Return type:

            List[PortfolioItem]

    positions(account='')[source]

        List of positions for the given account, or of all accounts if account is left blank.

        Parameters:

            account (str) – If specified, filter for this account name.
        Return type:

            List[Position]

    pnl(account='', modelCode='')[source]

        List of subscribed PnL objects (profit and loss), optionally filtered by account and/or modelCode.

        The PnL objects are kept live updated.

        Parameters:

                account – If specified, filter for this account name.

                modelCode – If specified, filter for this account model.

        Return type:

            List[PnL]

    pnlSingle(account='', modelCode='', conId=0)[source]

        List of subscribed PnLSingle objects (profit and loss for single positions).

        The PnLSingle objects are kept live updated.

        Parameters:

                account (str) – If specified, filter for this account name.

                modelCode (str) – If specified, filter for this account model.

                conId (int) – If specified, filter for this contract ID.

        Return type:

            List[PnLSingle]

    trades()[source]

        List of all order trades from this session.

        Return type:

            List[Trade]

    openTrades()[source]

        List of all open order trades.

        Return type:

            List[Trade]

    orders()[source]

        List of all orders from this session.

        Return type:

            List[Order]

    openOrders()[source]

        List of all open orders.

        Return type:

            List[Order]

    fills()[source]

        List of all fills from this session.

        Return type:

            List[Fill]

    executions()[source]

        List of all executions from this session.

        Return type:

            List[Execution]

    ticker(contract)[source]

        Get ticker of the given contract. It must have been requested before with reqMktData with the same contract object. The ticker may not be ready yet if called directly after reqMktData().

        Parameters:

            contract (Contract) – Contract to get ticker for.
        Return type:

            Optional[Ticker]

    tickers()[source]

        Get a list of all tickers.

        Return type:

            List[Ticker]

    pendingTickers()[source]

        Get a list of all tickers that have pending ticks or domTicks.

        Return type:

            List[Ticker]

    realtimeBars()[source]

        Get a list of all live updated bars. These can be 5 second realtime bars or live updated historical bars.

        Return type:

            List[Union[BarDataList, RealTimeBarList]]

    newsTicks()[source]

        List of ticks with headline news. The article itself can be retrieved with reqNewsArticle().

        Return type:

            List[NewsTick]

    newsBulletins()[source]

        List of IB news bulletins.

        Return type:

            List[NewsBulletin]

    reqTickers(*contracts, regulatorySnapshot=False)[source]

        Request and return a list of snapshot tickers. The list is returned when all tickers are ready.

        This method is blocking.

        Parameters:

                contracts (Contract) – Contracts to get tickers for.

                regulatorySnapshot (bool) – Request NBBO snapshots (may incur a fee).

        Return type:

            List[Ticker]

    qualifyContracts(*contracts)[source]

        Fully qualify the given contracts in-place. This will fill in the missing fields in the contract, especially the conId.

        Returns a list of contracts that have been successfully qualified.

        This method is blocking.

        Parameters:

            contracts (Contract) – Contracts to qualify.
        Return type:

            List[Contract]

    bracketOrder(action, quantity, limitPrice, takeProfitPrice, stopLossPrice, **kwargs)[source]

        Create a limit order that is bracketed by a take-profit order and a stop-loss order. Submit the bracket like:

        for o in bracket:
            ib.placeOrder(contract, o)

        https://interactivebrokers.github.io/tws-api/bracket_order.html

        Parameters:

                action (str) – ‘BUY’ or ‘SELL’.

                quantity (float) – Size of order.

                limitPrice (float) – Limit price of entry order.

                takeProfitPrice (float) – Limit price of profit order.

                stopLossPrice (float) – Stop price of loss order.

        Return type:

            BracketOrder

    static oneCancelsAll(orders, ocaGroup, ocaType)[source]

        Place the trades in the same One Cancels All (OCA) group.

        https://interactivebrokers.github.io/tws-api/oca.html

        Parameters:

            orders (List[Order]) – The orders that are to be placed together.
        Return type:

            List[Order]

    whatIfOrder(contract, order)[source]

        Retrieve commission and margin impact without actually placing the order. The given order will not be modified in any way.

        This method is blocking.

        Parameters:

                contract (Contract) – Contract to test.

                order (Order) – Order to test.

        Return type:

            OrderState

    placeOrder(contract, order)[source]

        Place a new order or modify an existing order. Returns a Trade that is kept live updated with status changes, fills, etc.

        Parameters:

                contract (Contract) – Contract to use for order.

                order (Order) – The order to be placed.

        Return type:

            Trade

    cancelOrder(order, manualCancelOrderTime='')[source]

        Cancel the order and return the Trade it belongs to.

        Parameters:

                order (Order) – The order to be canceled.

                manualCancelOrderTime (str) – For audit trail.

        Return type:

            Optional[Trade]

    reqGlobalCancel()[source]

        Cancel all active trades including those placed by other clients or TWS/IB gateway.

    reqCurrentTime()[source]

        Request TWS current time.

        This method is blocking.

        Return type:

            datetime

    reqAccountUpdates(account='')[source]

        This is called at startup - no need to call again.

        Request account and portfolio values of the account and keep updated. Returns when both account values and portfolio are filled.

        This method is blocking.

        Parameters:

            account (str) – If specified, filter for this account name.

    reqAccountUpdatesMulti(account='', modelCode='')[source]

        It is recommended to use accountValues() instead.

        Request account values of multiple accounts and keep updated.

        This method is blocking.

        Parameters:

                account (str) – If specified, filter for this account name.

                modelCode (str) – If specified, filter for this account model.

    reqAccountSummary()[source]

        It is recommended to use accountSummary() instead.

        Request account values for all accounts and keep them updated. Returns when account summary is filled.

        This method is blocking.

    reqAutoOpenOrders(autoBind=True)[source]

        Bind manual TWS orders so that they can be managed from this client. The clientId must be 0 and the TWS API setting “Use negative numbers to bind automatic orders” must be checked.

        This request is automatically called when clientId=0.

        https://interactivebrokers.github.io/tws-api/open_orders.html https://interactivebrokers.github.io/tws-api/modifying_orders.html

        Parameters:

            autoBind (bool) – Set binding on or off.

    reqOpenOrders()[source]

        Request and return a list of open orders.

        This method can give stale information where a new open order is not reported or an already filled or cancelled order is reported as open. It is recommended to use the more reliable and much faster openTrades() or openOrders() methods instead.

        This method is blocking.

        Return type:

            List[Trade]

    reqAllOpenOrders()[source]

        Request and return a list of all open orders over all clients. Note that the orders of other clients will not be kept in sync, use the master clientId mechanism instead to see other client’s orders that are kept in sync.

        Return type:

            List[Trade]

    reqCompletedOrders(apiOnly)[source]

        Request and return a list of completed trades.

        Parameters:

            apiOnly (bool) – Request only API orders (not manually placed TWS orders).
        Return type:

            List[Trade]

    reqExecutions(execFilter=None)[source]

        It is recommended to use fills() or executions() instead.

        Request and return a list of fills.

        This method is blocking.

        Parameters:

            execFilter (Optional[ExecutionFilter]) – If specified, return executions that match the filter.
        Return type:

            List[Fill]

    reqPositions()[source]

        It is recommended to use positions() instead.

        Request and return a list of positions for all accounts.

        This method is blocking.

        Return type:

            List[Position]

    reqPnL(account, modelCode='')[source]

        Start a subscription for profit and loss events.

        Returns a PnL object that is kept live updated. The result can also be queried from pnl().

        https://interactivebrokers.github.io/tws-api/pnl.html

        Parameters:

                account (str) – Subscribe to this account.

                modelCode (str) – If specified, filter for this account model.

        Return type:

            PnL

    cancelPnL(account, modelCode='')[source]

        Cancel PnL subscription.

        Parameters:

                account – Cancel for this account.

                modelCode (str) – If specified, cancel for this account model.

    reqPnLSingle(account, modelCode, conId)[source]

        Start a subscription for profit and loss events for single positions.

        Returns a PnLSingle object that is kept live updated. The result can also be queried from pnlSingle().

        https://interactivebrokers.github.io/tws-api/pnl.html

        Parameters:

                account (str) – Subscribe to this account.

                modelCode (str) – Filter for this account model.

                conId (int) – Filter for this contract ID.

        Return type:

            PnLSingle

    cancelPnLSingle(account, modelCode, conId)[source]

        Cancel PnLSingle subscription for the given account, modelCode and conId.

        Parameters:

                account (str) – Cancel for this account name.

                modelCode (str) – Cancel for this account model.

                conId (int) – Cancel for this contract ID.

    reqContractDetails(contract)[source]

        Get a list of contract details that match the given contract. If the returned list is empty then the contract is not known; If the list has multiple values then the contract is ambiguous.

        The fully qualified contract is available in the the ContractDetails.contract attribute.

        This method is blocking.

        https://interactivebrokers.github.io/tws-api/contract_details.html

        Parameters:

            contract (Contract) – The contract to get details for.
        Return type:

            List[ContractDetails]

    reqMatchingSymbols(pattern)[source]

        Request contract descriptions of contracts that match a pattern.

        This method is blocking.

        https://interactivebrokers.github.io/tws-api/matching_symbols.html

        Parameters:

            pattern (str) – The first few letters of the ticker symbol, or for longer strings a character sequence matching a word in the security name.
        Return type:

            List[ContractDescription]

    reqMarketRule(marketRuleId)[source]

        Request price increments rule.

        https://interactivebrokers.github.io/tws-api/minimum_increment.html

        Parameters:

            marketRuleId (int) – ID of market rule. The market rule IDs for a contract can be obtained via reqContractDetails() from ContractDetails.marketRuleIds, which contains a comma separated string of market rule IDs.
        Return type:

            PriceIncrement

    reqRealTimeBars(contract, barSize, whatToShow, useRTH, realTimeBarsOptions=[])[source]

        Request realtime 5 second bars.

        https://interactivebrokers.github.io/tws-api/realtime_bars.html

        Parameters:

                contract (Contract) – Contract of interest.

                barSize (int) – Must be 5.

                whatToShow (str) – Specifies the source for constructing bars. Can be ‘TRADES’, ‘MIDPOINT’, ‘BID’ or ‘ASK’.

                useRTH (bool) – If True then only show data from within Regular Trading Hours, if False then show all data.

                realTimeBarsOptions (List[TagValue]) – Unknown.

        Return type:

            RealTimeBarList

    cancelRealTimeBars(bars)[source]

        Cancel the realtime bars subscription.

        Parameters:

            bars (RealTimeBarList) – The bar list that was obtained from reqRealTimeBars.

    reqHistoricalData(contract, endDateTime, durationStr, barSizeSetting, whatToShow, useRTH, formatDate=1, keepUpToDate=False, chartOptions=[], timeout=60)[source]

        Request historical bar data.

        This method is blocking.

        https://interactivebrokers.github.io/tws-api/historical_bars.html

        Parameters:

                contract (Contract) – Contract of interest.

                endDateTime (Union[datetime, date, str, None]) – Can be set to ‘’ to indicate the current time, or it can be given as a datetime.date or datetime.datetime, or it can be given as a string in ‘yyyyMMdd HH:mm:ss’ format. If no timezone is given then the TWS login timezone is used.

                durationStr (str) – Time span of all the bars. Examples: ‘60 S’, ‘30 D’, ‘13 W’, ‘6 M’, ‘10 Y’.

                barSizeSetting (str) – Time period of one bar. Must be one of: ‘1 secs’, ‘5 secs’, ‘10 secs’ 15 secs’, ‘30 secs’, ‘1 min’, ‘2 mins’, ‘3 mins’, ‘5 mins’, ‘10 mins’, ‘15 mins’, ‘20 mins’, ‘30 mins’, ‘1 hour’, ‘2 hours’, ‘3 hours’, ‘4 hours’, ‘8 hours’, ‘1 day’, ‘1 week’, ‘1 month’.

                whatToShow (str) – Specifies the source for constructing bars. Must be one of: ‘TRADES’, ‘MIDPOINT’, ‘BID’, ‘ASK’, ‘BID_ASK’, ‘ADJUSTED_LAST’, ‘HISTORICAL_VOLATILITY’, ‘OPTION_IMPLIED_VOLATILITY’, ‘REBATE_RATE’, ‘FEE_RATE’, ‘YIELD_BID’, ‘YIELD_ASK’, ‘YIELD_BID_ASK’, ‘YIELD_LAST’. For ‘SCHEDULE’ use reqHistoricalSchedule().

                useRTH (bool) – If True then only show data from within Regular Trading Hours, if False then show all data.

                formatDate (int) – For an intraday request setting to 2 will cause the returned date fields to be timezone-aware datetime.datetime with UTC timezone, instead of local timezone as used by TWS.

                keepUpToDate (bool) – If True then a realtime subscription is started to keep the bars updated; endDateTime must be set empty (‘’) then.

                chartOptions (List[TagValue]) – Unknown.

                timeout (float) – Timeout in seconds after which to cancel the request and return an empty bar series. Set to 0 to wait indefinitely.

        Return type:

            BarDataList

    cancelHistoricalData(bars)[source]

        Cancel the update subscription for the historical bars.

        Parameters:

            bars (BarDataList) – The bar list that was obtained from reqHistoricalData with a keepUpToDate subscription.

    reqHistoricalSchedule(contract, numDays, endDateTime='', useRTH=True)[source]

        Request historical schedule.

        This method is blocking.

        Parameters:

                contract (Contract) – Contract of interest.

                numDays (int) – Number of days.

                endDateTime (Union[datetime, date, str, None]) – Can be set to ‘’ to indicate the current time, or it can be given as a datetime.date or datetime.datetime, or it can be given as a string in ‘yyyyMMdd HH:mm:ss’ format. If no timezone is given then the TWS login timezone is used.

                useRTH (bool) – If True then show schedule for Regular Trading Hours, if False then for extended hours.

        Return type:

            HistoricalSchedule

    reqHistoricalTicks(contract, startDateTime, endDateTime, numberOfTicks, whatToShow, useRth, ignoreSize=False, miscOptions=[])[source]

        Request historical ticks. The time resolution of the ticks is one second.

        This method is blocking.

        https://interactivebrokers.github.io/tws-api/historical_time_and_sales.html

        Parameters:

                contract (Contract) – Contract to query.

                startDateTime (Union[str, date]) – Can be given as a datetime.date or datetime.datetime, or it can be given as a string in ‘yyyyMMdd HH:mm:ss’ format. If no timezone is given then the TWS login timezone is used.

                endDateTime (Union[str, date]) – One of startDateTime or endDateTime can be given, the other must be blank.

                numberOfTicks (int) – Number of ticks to request (1000 max). The actual result can contain a bit more to accommodate all ticks in the latest second.

                whatToShow (str) – One of ‘Bid_Ask’, ‘Midpoint’ or ‘Trades’.

                useRTH – If True then only show data from within Regular Trading Hours, if False then show all data.

                ignoreSize (bool) – Ignore bid/ask ticks that only update the size.

                miscOptions (List[TagValue]) – Unknown.

        Return type:

            List

    reqMarketDataType(marketDataType)[source]

        Set the market data type used for reqMktData().

        Parameters:

            marketDataType (int) –

            One of:

                1 = Live

                2 = Frozen

                3 = Delayed

                4 = Delayed frozen

        https://interactivebrokers.github.io/tws-api/market_data_type.html

    reqHeadTimeStamp(contract, whatToShow, useRTH, formatDate=1)[source]

        Get the datetime of earliest available historical data for the contract.

        Parameters:

                contract (Contract) – Contract of interest.

                useRTH (bool) – If True then only show data from within Regular Trading Hours, if False then show all data.

                formatDate (int) – If set to 2 then the result is returned as a timezone-aware datetime.datetime with UTC timezone.

        Return type:

            datetime

    reqMktData(contract, genericTickList='', snapshot=False, regulatorySnapshot=False, mktDataOptions=[])[source]

        Subscribe to tick data or request a snapshot. Returns the Ticker that holds the market data. The ticker will initially be empty and gradually (after a couple of seconds) be filled.

        https://interactivebrokers.github.io/tws-api/md_request.html

        Parameters:

                contract (Contract) – Contract of interest.

                genericTickList (str) –

                Comma separated IDs of desired generic ticks that will cause corresponding Ticker fields to be filled:

                ID
                	

                Ticker fields

                100
                	

                putVolume, callVolume (for options)

                101
                	

                putOpenInterest, callOpenInterest (for options)

                104
                	

                histVolatility (for options)

                105
                	

                avOptionVolume (for options)

                106
                	

                impliedVolatility (for options)

                162
                	

                indexFuturePremium

                165
                	

                low13week, high13week, low26week, high26week, low52week, high52week, avVolume

                221
                	

                markPrice

                225
                	

                auctionVolume, auctionPrice, auctionImbalance

                233
                	

                last, lastSize, rtVolume, rtTime, vwap (Time & Sales)

                236
                	

                shortableShares

                258
                	

                fundamentalRatios (of type ib_insync.objects.FundamentalRatios)

                293
                	

                tradeCount

                294
                	

                tradeRate

                295
                	

                volumeRate

                375
                	

                rtTradeVolume

                411
                	

                rtHistVolatility

                456
                	

                dividends (of type ib_insync.objects.Dividends)

                588
                	

                futuresOpenInterest

                snapshot (bool) – If True then request a one-time snapshot, otherwise subscribe to a stream of realtime tick data.

                regulatorySnapshot (bool) – Request NBBO snapshot (may incur a fee).

                mktDataOptions (List[TagValue]) – Unknown

        Return type:

            Ticker

    cancelMktData(contract)[source]

        Unsubscribe from realtime streaming tick data.

        Parameters:

            contract (Contract) – The exact contract object that was used to subscribe with.

    reqTickByTickData(contract, tickType, numberOfTicks=0, ignoreSize=False)[source]

        Subscribe to tick-by-tick data and return the Ticker that holds the ticks in ticker.tickByTicks.

        https://interactivebrokers.github.io/tws-api/tick_data.html

        Parameters:

                contract (Contract) – Contract of interest.

                tickType (str) – One of ‘Last’, ‘AllLast’, ‘BidAsk’ or ‘MidPoint’.

                numberOfTicks (int) – Number of ticks or 0 for unlimited.

                ignoreSize (bool) – Ignore bid/ask ticks that only update the size.

        Return type:

            Ticker

    cancelTickByTickData(contract, tickType)[source]

        Unsubscribe from tick-by-tick data

        Parameters:

            contract (Contract) – The exact contract object that was used to subscribe with.

    reqSmartComponents(bboExchange)[source]

        Obtain mapping from single letter codes to exchange names.

        Note: The exchanges must be open when using this request, otherwise an empty list is returned.

        Return type:

            List[SmartComponent]

    reqMktDepthExchanges()[source]

        Get those exchanges that have have multiple market makers (and have ticks returned with marketMaker info).

        Return type:

            List[DepthMktDataDescription]

    reqMktDepth(contract, numRows=5, isSmartDepth=False, mktDepthOptions=None)[source]

        Subscribe to market depth data (a.k.a. DOM, L2 or order book).

        https://interactivebrokers.github.io/tws-api/market_depth.html

        Parameters:

                contract (Contract) – Contract of interest.

                numRows (int) – Number of depth level on each side of the order book (5 max).

                isSmartDepth (bool) – Consolidate the order book across exchanges.

                mktDepthOptions – Unknown.

        Return type:

            Ticker
        Returns:

            The Ticker that holds the market depth in ticker.domBids and ticker.domAsks and the list of MktDepthData in ticker.domTicks.

    cancelMktDepth(contract, isSmartDepth=False)[source]

        Unsubscribe from market depth data.

        Parameters:

            contract (Contract) – The exact contract object that was used to subscribe with.

    reqHistogramData(contract, useRTH, period)[source]

        Request histogram data.

        This method is blocking.

        https://interactivebrokers.github.io/tws-api/histograms.html

        Parameters:

                contract (Contract) – Contract to query.

                useRTH (bool) – If True then only show data from within Regular Trading Hours, if False then show all data.

                period (str) – Period of which data is being requested, for example ‘3 days’.

        Return type:

            List[HistogramData]

    reqFundamentalData(contract, reportType, fundamentalDataOptions=[])[source]

        Get fundamental data of a contract in XML format.

        This method is blocking.

        https://interactivebrokers.github.io/tws-api/fundamentals.html

        Parameters:

                contract (Contract) – Contract to query.

                reportType (str) –

                    ‘ReportsFinSummary’: Financial summary

                    ’ReportsOwnership’: Company’s ownership

                    ’ReportSnapshot’: Company’s financial overview

                    ’ReportsFinStatements’: Financial Statements

                    ’RESC’: Analyst Estimates

                    ’CalendarReport’: Company’s calendar

                fundamentalDataOptions (List[TagValue]) – Unknown

        Return type:

            str

    reqScannerData(subscription, scannerSubscriptionOptions=[], scannerSubscriptionFilterOptions=[])[source]

        Do a blocking market scan by starting a subscription and canceling it after the initial list of results are in.

        This method is blocking.

        https://interactivebrokers.github.io/tws-api/market_scanners.html

        Parameters:

                subscription (ScannerSubscription) – Basic filters.

                scannerSubscriptionOptions (List[TagValue]) – Unknown.

                scannerSubscriptionFilterOptions (List[TagValue]) – Advanced generic filters.

        Return type:

            ScanDataList

    reqScannerSubscription(subscription, scannerSubscriptionOptions=[], scannerSubscriptionFilterOptions=[])[source]

        Subscribe to market scan data.

        https://interactivebrokers.github.io/tws-api/market_scanners.html

        Parameters:

                subscription (ScannerSubscription) – What to scan for.

                scannerSubscriptionOptions (List[TagValue]) – Unknown.

                scannerSubscriptionFilterOptions (List[TagValue]) – Unknown.

        Return type:

            ScanDataList

    cancelScannerSubscription(dataList)[source]

        Cancel market data subscription.

        https://interactivebrokers.github.io/tws-api/market_scanners.html

        Parameters:

            dataList (ScanDataList) – The scan data list that was obtained from reqScannerSubscription().

    reqScannerParameters()[source]

        Requests an XML list of scanner parameters.

        This method is blocking.

        Return type:

            str

    calculateImpliedVolatility(contract, optionPrice, underPrice, implVolOptions=[])[source]

        Calculate the volatility given the option price.

        This method is blocking.

        https://interactivebrokers.github.io/tws-api/option_computations.html

        Parameters:

                contract (Contract) – Option contract.

                optionPrice (float) – Option price to use in calculation.

                underPrice (float) – Price of the underlier to use in calculation

                implVolOptions (List[TagValue]) – Unknown

        Return type:

            OptionComputation

    calculateOptionPrice(contract, volatility, underPrice, optPrcOptions=[])[source]

        Calculate the option price given the volatility.

        This method is blocking.

        https://interactivebrokers.github.io/tws-api/option_computations.html

        Parameters:

                contract (Contract) – Option contract.

                volatility (float) – Option volatility to use in calculation.

                underPrice (float) – Price of the underlier to use in calculation

                implVolOptions – Unknown

        Return type:

            OptionComputation

    reqSecDefOptParams(underlyingSymbol, futFopExchange, underlyingSecType, underlyingConId)[source]

        Get the option chain.

        This method is blocking.

        https://interactivebrokers.github.io/tws-api/options.html

        Parameters:

                underlyingSymbol (str) – Symbol of underlier contract.

                futFopExchange (str) – Exchange (only for FuturesOption, otherwise leave blank).

                underlyingSecType (str) – The type of the underlying security, like ‘STK’ or ‘FUT’.

                underlyingConId (int) – conId of the underlying contract.

        Return type:

            List[OptionChain]

    exerciseOptions(contract, exerciseAction, exerciseQuantity, account, override)[source]

        Exercise an options contract.

        https://interactivebrokers.github.io/tws-api/options.html

        Parameters:

                contract (Contract) – The option contract to be exercised.

                exerciseAction (int) –

                    1 = exercise the option

                    2 = let the option lapse

                exerciseQuantity (int) – Number of contracts to be exercised.

                account (str) – Destination account.

                override (int) –

                    0 = no override

                    1 = override the system’s natural action

    reqNewsProviders()[source]

        Get a list of news providers.

        This method is blocking.

        Return type:

            List[NewsProvider]

    reqNewsArticle(providerCode, articleId, newsArticleOptions=[])[source]

        Get the body of a news article.

        This method is blocking.

        https://interactivebrokers.github.io/tws-api/news.html

        Parameters:

                providerCode (str) – Code indicating news provider, like ‘BZ’ or ‘FLY’.

                articleId (str) – ID of the specific article.

                newsArticleOptions (List[TagValue]) – Unknown.

        Return type:

            NewsArticle

    reqHistoricalNews(conId, providerCodes, startDateTime, endDateTime, totalResults, historicalNewsOptions=[])[source]

        Get historical news headline.

        https://interactivebrokers.github.io/tws-api/news.html

        This method is blocking.

        Parameters:

                conId (int) – Search news articles for contract with this conId.

                providerCodes (str) – A ‘+’-separated list of provider codes, like ‘BZ+FLY’.

                startDateTime (Union[str, date]) – The (exclusive) start of the date range. Can be given as a datetime.date or datetime.datetime, or it can be given as a string in ‘yyyyMMdd HH:mm:ss’ format. If no timezone is given then the TWS login timezone is used.

                endDateTime (Union[str, date]) – The (inclusive) end of the date range. Can be given as a datetime.date or datetime.datetime, or it can be given as a string in ‘yyyyMMdd HH:mm:ss’ format. If no timezone is given then the TWS login timezone is used.

                totalResults (int) – Maximum number of headlines to fetch (300 max).

                historicalNewsOptions (List[TagValue]) – Unknown.

        Return type:

            HistoricalNews

    reqNewsBulletins(allMessages)[source]

        Subscribe to IB news bulletins.

        https://interactivebrokers.github.io/tws-api/news.html

        Parameters:

            allMessages (bool) – If True then fetch all messages for the day.

    cancelNewsBulletins()[source]

        Cancel subscription to IB news bulletins.

    requestFA(faDataType)[source]

        Requests to change the FA configuration.

        This method is blocking.

        Parameters:

            faDataType (int) –

                1 = Groups: Offer traders a way to create a group of accounts and apply a single allocation method to all accounts in the group.

                2 = Profiles: Let you allocate shares on an account-by-account basis using a predefined calculation value.

                3 = Account Aliases: Let you easily identify the accounts by meaningful names rather than account numbers.

    replaceFA(faDataType, xml)[source]

        Replaces Financial Advisor’s settings.

        Parameters:

                faDataType (int) – See requestFA().

                xml (str) – The XML-formatted configuration string.

    reqWshMetaData()[source]

        Request Wall Street Horizon metadata.

        https://interactivebrokers.github.io/tws-api/fundamentals.html

    cancelWshMetaData()[source]

        Cancel WSH metadata.

    reqWshEventData(data)[source]

        Request Wall Street Horizon event data.

        reqWshMetaData() must have been called first before using this method.

        Parameters:

            data (WshEventData) – Filters for selecting the corporate event data.

        https://interactivebrokers.github.io/tws-api/wshe_filters.html

    cancelWshEventData()[source]

        Cancel active WHS event data.

    getWshMetaData()[source]

        Blocking convenience method that returns the WSH metadata (that is the available filters and event types) as a JSON string.

        Please note that a Wall Street Horizon subscription is required.

        # Get the list of available filters and event types:
        meta = ib.getWshMetaData()
        print(meta)

        Return type:

            str

    getWshEventData(data)[source]

        Blocking convenience method that returns the WSH event data as a JSON string. getWshMetaData() must have been called first before using this method.

        Please note that a Wall Street Horizon subscription is required.

        # For IBM (with conId=8314) query the:
        #   - Earnings Dates (wshe_ed)
        #   - Board of Directors meetings (wshe_bod)
        data = WshEventData(
            filter = '''{
              "country": "All",
              "watchlist": ["8314"],
              "limit_region": 10,
              "limit": 10,
              "wshe_ed": "true",
              "wshe_bod": "true"
            }''')
        events = ib.getWshEventData(data)
        print(events)

        Return type:

            str

    reqUserInfo()[source]

        Get the White Branding ID of the user.

        Return type:

            str

    async connectAsync(host='127.0.0.1', port=7497, clientId=1, timeout=4, readonly=False, account='', raiseSyncErrors=False)[source]

    async qualifyContractsAsync(*contracts)[source]

        Return type:

            List[Contract]

    async reqTickersAsync(*contracts, regulatorySnapshot=False)[source]

        Return type:

            List[Ticker]

    whatIfOrderAsync(contract, order)[source]

        Return type:

            Awaitable[OrderState]

    reqCurrentTimeAsync()[source]

        Return type:

            Awaitable[datetime]

    reqAccountUpdatesAsync(account)[source]

        Return type:

            Awaitable[None]

    reqAccountUpdatesMultiAsync(account, modelCode='')[source]

        Return type:

            Awaitable[None]

    async accountSummaryAsync(account='')[source]

        Return type:

            List[AccountValue]

    reqAccountSummaryAsync()[source]

        Return type:

            Awaitable[None]

    reqOpenOrdersAsync()[source]

        Return type:

            Awaitable[List[Trade]]

    reqAllOpenOrdersAsync()[source]

        Return type:

            Awaitable[List[Trade]]

    reqCompletedOrdersAsync(apiOnly)[source]

        Return type:

            Awaitable[List[Trade]]

    reqExecutionsAsync(execFilter=None)[source]

        Return type:

            Awaitable[List[Fill]]

    reqPositionsAsync()[source]

        Return type:

            Awaitable[List[Position]]

    reqContractDetailsAsync(contract)[source]

        Return type:

            Awaitable[List[ContractDetails]]

    async reqMatchingSymbolsAsync(pattern)[source]

        Return type:

            Optional[List[ContractDescription]]

    async reqMarketRuleAsync(marketRuleId)[source]

        Return type:

            Optional[List[PriceIncrement]]

    async reqHistoricalDataAsync(contract, endDateTime, durationStr, barSizeSetting, whatToShow, useRTH, formatDate=1, keepUpToDate=False, chartOptions=[], timeout=60)[source]

        Return type:

            BarDataList

    reqHistoricalScheduleAsync(contract, numDays, endDateTime='', useRTH=True)[source]

        Return type:

            Awaitable[HistoricalSchedule]

    reqHistoricalTicksAsync(contract, startDateTime, endDateTime, numberOfTicks, whatToShow, useRth, ignoreSize=False, miscOptions=[])[source]

        Return type:

            Awaitable[List]

    async reqHeadTimeStampAsync(contract, whatToShow, useRTH, formatDate)[source]

        Return type:

            datetime

    reqSmartComponentsAsync(bboExchange)[source]

    reqMktDepthExchangesAsync()[source]

        Return type:

            Awaitable[List[DepthMktDataDescription]]

    reqHistogramDataAsync(contract, useRTH, period)[source]

        Return type:

            Awaitable[List[HistogramData]]

    reqFundamentalDataAsync(contract, reportType, fundamentalDataOptions=[])[source]

        Return type:

            Awaitable[str]

    async reqScannerDataAsync(subscription, scannerSubscriptionOptions=[], scannerSubscriptionFilterOptions=[])[source]

        Return type:

            ScanDataList

    reqScannerParametersAsync()[source]

        Return type:

            Awaitable[str]

    async calculateImpliedVolatilityAsync(contract, optionPrice, underPrice, implVolOptions=[])[source]

        Return type:

            Optional[OptionComputation]

    async calculateOptionPriceAsync(contract, volatility, underPrice, optPrcOptions=[])[source]

        Return type:

            Optional[OptionComputation]

    reqSecDefOptParamsAsync(underlyingSymbol, futFopExchange, underlyingSecType, underlyingConId)[source]

        Return type:

            Awaitable[List[OptionChain]]

    reqNewsProvidersAsync()[source]

        Return type:

            Awaitable[List[NewsProvider]]

    reqNewsArticleAsync(providerCode, articleId, newsArticleOptions=[])[source]

        Return type:

            Awaitable[NewsArticle]

    async reqHistoricalNewsAsync(conId, providerCodes, startDateTime, endDateTime, totalResults, historicalNewsOptions=[])[source]

        Return type:

            Optional[HistoricalNews]

    async requestFAAsync(faDataType)[source]

    async getWshMetaDataAsync()[source]

        Return type:

            str

    async getWshEventDataAsync(data)[source]

        Return type:

            str

    reqUserInfoAsync()[source]