Order

Order types used by Interactive Brokers.

class ib_insync.order.Order(orderId=0, clientId=0, permId=0, action='', totalQuantity=0.0, orderType='', lmtPrice=1.7976931348623157e+308, auxPrice=1.7976931348623157e+308, tif='', activeStartTime='', activeStopTime='', ocaGroup='', ocaType=0, orderRef='', transmit=True, parentId=0, blockOrder=False, sweepToFill=False, displaySize=0, triggerMethod=0, outsideRth=False, hidden=False, goodAfterTime='', goodTillDate='', rule80A='', allOrNone=False, minQty=2147483647, percentOffset=1.7976931348623157e+308, overridePercentageConstraints=False, trailStopPrice=1.7976931348623157e+308, trailingPercent=1.7976931348623157e+308, faGroup='', faProfile='', faMethod='', faPercentage='', designatedLocation='', openClose='O', origin=0, shortSaleSlot=0, exemptCode=-1, discretionaryAmt=0.0, eTradeOnly=False, firmQuoteOnly=False, nbboPriceCap=1.7976931348623157e+308, optOutSmartRouting=False, auctionStrategy=0, startingPrice=1.7976931348623157e+308, stockRefPrice=1.7976931348623157e+308, delta=1.7976931348623157e+308, stockRangeLower=1.7976931348623157e+308, stockRangeUpper=1.7976931348623157e+308, randomizePrice=False, randomizeSize=False, volatility=1.7976931348623157e+308, volatilityType=2147483647, deltaNeutralOrderType='', deltaNeutralAuxPrice=1.7976931348623157e+308, deltaNeutralConId=0, deltaNeutralSettlingFirm='', deltaNeutralClearingAccount='', deltaNeutralClearingIntent='', deltaNeutralOpenClose='', deltaNeutralShortSale=False, deltaNeutralShortSaleSlot=0, deltaNeutralDesignatedLocation='', continuousUpdate=False, referencePriceType=2147483647, basisPoints=1.7976931348623157e+308, basisPointsType=2147483647, scaleInitLevelSize=2147483647, scaleSubsLevelSize=2147483647, scalePriceIncrement=1.7976931348623157e+308, scalePriceAdjustValue=1.7976931348623157e+308, scalePriceAdjustInterval=2147483647, scaleProfitOffset=1.7976931348623157e+308, scaleAutoReset=False, scaleInitPosition=2147483647, scaleInitFillQty=2147483647, scaleRandomPercent=False, scaleTable='', hedgeType='', hedgeParam='', account='', settlingFirm='', clearingAccount='', clearingIntent='', algoStrategy='', algoParams=<factory>, smartComboRoutingParams=<factory>, algoId='', whatIf=False, notHeld=False, solicited=False, modelCode='', orderComboLegs=<factory>, orderMiscOptions=<factory>, referenceContractId=0, peggedChangeAmount=0.0, isPeggedChangeAmountDecrease=False, referenceChangeAmount=0.0, referenceExchangeId='', adjustedOrderType='', triggerPrice=1.7976931348623157e+308, adjustedStopPrice=1.7976931348623157e+308, adjustedStopLimitPrice=1.7976931348623157e+308, adjustedTrailingAmount=1.7976931348623157e+308, adjustableTrailingUnit=0, lmtPriceOffset=1.7976931348623157e+308, conditions=<factory>, conditionsCancelOrder=False, conditionsIgnoreRth=False, extOperator='', softDollarTier=<factory>, cashQty=1.7976931348623157e+308, mifid2DecisionMaker='', mifid2DecisionAlgo='', mifid2ExecutionTrader='', mifid2ExecutionAlgo='', dontUseAutoPriceForHedge=False, isOmsContainer=False, discretionaryUpToLimitPrice=False, autoCancelDate='', filledQuantity=1.7976931348623157e+308, refFuturesConId=0, autoCancelParent=False, shareholder='', imbalanceOnly=False, routeMarketableToBbo=False, parentPermId=0, usePriceMgmtAlgo=False, duration=2147483647, postToAts=2147483647, advancedErrorOverride='', manualOrderTime='', minTradeQty=2147483647, minCompeteSize=2147483647, competeAgainstBestOffset=1.7976931348623157e+308, midOffsetAtWhole=1.7976931348623157e+308, midOffsetAtHalf=1.7976931348623157e+308)[source]

    Order for trading contracts.

    https://interactivebrokers.github.io/tws-api/available_orders.html

    orderId: int = 0

    clientId: int = 0

    permId: int = 0

    action: str = ''

    totalQuantity: float = 0.0

    orderType: str = ''

    lmtPrice: float = 1.7976931348623157e+308

    auxPrice: float = 1.7976931348623157e+308

    tif: str = ''

    activeStartTime: str = ''

    activeStopTime: str = ''

    ocaGroup: str = ''

    ocaType: int = 0

    orderRef: str = ''

    transmit: bool = True

    parentId: int = 0

    blockOrder: bool = False

    sweepToFill: bool = False

    displaySize: int = 0

    triggerMethod: int = 0

    outsideRth: bool = False

    hidden: bool = False

    goodAfterTime: str = ''

    goodTillDate: str = ''

    rule80A: str = ''

    allOrNone: bool = False

    minQty: int = 2147483647

    percentOffset: float = 1.7976931348623157e+308

    overridePercentageConstraints: bool = False

    trailStopPrice: float = 1.7976931348623157e+308

    trailingPercent: float = 1.7976931348623157e+308

    faGroup: str = ''

    faProfile: str = ''

    faMethod: str = ''

    faPercentage: str = ''

    designatedLocation: str = ''

    openClose: str = 'O'

    origin: int = 0

    shortSaleSlot: int = 0

    exemptCode: int = -1

    discretionaryAmt: float = 0.0

    eTradeOnly: bool = False

    firmQuoteOnly: bool = False

    nbboPriceCap: float = 1.7976931348623157e+308

    optOutSmartRouting: bool = False

    auctionStrategy: int = 0

    startingPrice: float = 1.7976931348623157e+308

    stockRefPrice: float = 1.7976931348623157e+308

    delta: float = 1.7976931348623157e+308

    stockRangeLower: float = 1.7976931348623157e+308

    stockRangeUpper: float = 1.7976931348623157e+308

    randomizePrice: bool = False

    randomizeSize: bool = False

    volatility: float = 1.7976931348623157e+308

    volatilityType: int = 2147483647

    deltaNeutralOrderType: str = ''

    deltaNeutralAuxPrice: float = 1.7976931348623157e+308

    deltaNeutralConId: int = 0

    deltaNeutralSettlingFirm: str = ''

    deltaNeutralClearingAccount: str = ''

    deltaNeutralClearingIntent: str = ''

    deltaNeutralOpenClose: str = ''

    deltaNeutralShortSale: bool = False

    deltaNeutralShortSaleSlot: int = 0

    deltaNeutralDesignatedLocation: str = ''

    continuousUpdate: bool = False

    referencePriceType: int = 2147483647

    basisPoints: float = 1.7976931348623157e+308

    basisPointsType: int = 2147483647

    scaleInitLevelSize: int = 2147483647

    scaleSubsLevelSize: int = 2147483647

    scalePriceIncrement: float = 1.7976931348623157e+308

    scalePriceAdjustValue: float = 1.7976931348623157e+308

    scalePriceAdjustInterval: int = 2147483647

    scaleProfitOffset: float = 1.7976931348623157e+308

    scaleAutoReset: bool = False

    scaleInitPosition: int = 2147483647

    scaleInitFillQty: int = 2147483647

    scaleRandomPercent: bool = False

    scaleTable: str = ''

    hedgeType: str = ''

    hedgeParam: str = ''

    account: str = ''

    settlingFirm: str = ''

    clearingAccount: str = ''

    clearingIntent: str = ''

    algoStrategy: str = ''

    algoParams: List[TagValue]

    smartComboRoutingParams: List[TagValue]

    algoId: str = ''

    whatIf: bool = False

    notHeld: bool = False

    solicited: bool = False

    modelCode: str = ''

    orderComboLegs: List[OrderComboLeg]

    orderMiscOptions: List[TagValue]

    referenceContractId: int = 0

    peggedChangeAmount: float = 0.0

    isPeggedChangeAmountDecrease: bool = False

    referenceChangeAmount: float = 0.0

    referenceExchangeId: str = ''

    adjustedOrderType: str = ''

    triggerPrice: float = 1.7976931348623157e+308

    adjustedStopPrice: float = 1.7976931348623157e+308

    adjustedStopLimitPrice: float = 1.7976931348623157e+308

    adjustedTrailingAmount: float = 1.7976931348623157e+308

    adjustableTrailingUnit: int = 0

    lmtPriceOffset: float = 1.7976931348623157e+308

    conditions: List[OrderCondition]

    conditionsCancelOrder: bool = False

    conditionsIgnoreRth: bool = False

    extOperator: str = ''

    softDollarTier: SoftDollarTier

    cashQty: float = 1.7976931348623157e+308

    mifid2DecisionMaker: str = ''

    mifid2DecisionAlgo: str = ''

    mifid2ExecutionTrader: str = ''

    mifid2ExecutionAlgo: str = ''

    dontUseAutoPriceForHedge: bool = False

    isOmsContainer: bool = False

    discretionaryUpToLimitPrice: bool = False

    autoCancelDate: str = ''

    filledQuantity: float = 1.7976931348623157e+308

    refFuturesConId: int = 0

    autoCancelParent: bool = False

    shareholder: str = ''

    imbalanceOnly: bool = False

    routeMarketableToBbo: bool = False

    parentPermId: int = 0

    usePriceMgmtAlgo: bool = False

    duration: int = 2147483647

    postToAts: int = 2147483647

    advancedErrorOverride: str = ''

    manualOrderTime: str = ''

    minTradeQty: int = 2147483647

    minCompeteSize: int = 2147483647

    competeAgainstBestOffset: float = 1.7976931348623157e+308

    midOffsetAtWhole: float = 1.7976931348623157e+308

    midOffsetAtHalf: float = 1.7976931348623157e+308

    dict()

        Return dataclass values as dict. This is a non-recursive variant of dataclasses.asdict.

        Return type:

            dict

    nonDefaults()

        For a dataclass instance get the fields that are different from the default values and return as dict.

        Return type:

            dict

    tuple()

        Return dataclass values as tuple. This is a non-recursive variant of dataclasses.astuple.

        Return type:

            tuple

    update(*srcObjs, **kwargs)

        Update fields of the given dataclass object from zero or more dataclass source objects and/or from keyword arguments.

        Return type:

            object

class ib_insync.order.LimitOrder(action, totalQuantity, lmtPrice, **kwargs)[source]

    dict()

        Return dataclass values as dict. This is a non-recursive variant of dataclasses.asdict.

        Return type:

            dict

    nonDefaults()

        For a dataclass instance get the fields that are different from the default values and return as dict.

        Return type:

            dict

    tuple()

        Return dataclass values as tuple. This is a non-recursive variant of dataclasses.astuple.

        Return type:

            tuple

    update(*srcObjs, **kwargs)

        Update fields of the given dataclass object from zero or more dataclass source objects and/or from keyword arguments.

        Return type:

            object

class ib_insync.order.MarketOrder(action, totalQuantity, **kwargs)[source]

    dict()

        Return dataclass values as dict. This is a non-recursive variant of dataclasses.asdict.

        Return type:

            dict

    nonDefaults()

        For a dataclass instance get the fields that are different from the default values and return as dict.

        Return type:

            dict

    tuple()

        Return dataclass values as tuple. This is a non-recursive variant of dataclasses.astuple.

        Return type:

            tuple

    update(*srcObjs, **kwargs)

        Update fields of the given dataclass object from zero or more dataclass source objects and/or from keyword arguments.

        Return type:

            object

class ib_insync.order.StopOrder(action, totalQuantity, stopPrice, **kwargs)[source]

    dict()

        Return dataclass values as dict. This is a non-recursive variant of dataclasses.asdict.

        Return type:

            dict

    nonDefaults()

        For a dataclass instance get the fields that are different from the default values and return as dict.

        Return type:

            dict

    tuple()

        Return dataclass values as tuple. This is a non-recursive variant of dataclasses.astuple.

        Return type:

            tuple

    update(*srcObjs, **kwargs)

        Update fields of the given dataclass object from zero or more dataclass source objects and/or from keyword arguments.

        Return type:

            object

class ib_insync.order.StopLimitOrder(action, totalQuantity, lmtPrice, stopPrice, **kwargs)[source]

    dict()

        Return dataclass values as dict. This is a non-recursive variant of dataclasses.asdict.

        Return type:

            dict

    nonDefaults()

        For a dataclass instance get the fields that are different from the default values and return as dict.

        Return type:

            dict

    tuple()

        Return dataclass values as tuple. This is a non-recursive variant of dataclasses.astuple.

        Return type:

            tuple

    update(*srcObjs, **kwargs)

        Update fields of the given dataclass object from zero or more dataclass source objects and/or from keyword arguments.

        Return type:

            object

class ib_insync.order.OrderStatus(orderId=0, status='', filled=0.0, remaining=0.0, avgFillPrice=0.0, permId=0, parentId=0, lastFillPrice=0.0, clientId=0, whyHeld='', mktCapPrice=0.0)[source]

    orderId: int = 0

    status: str = ''

    filled: float = 0.0

    remaining: float = 0.0

    avgFillPrice: float = 0.0

    permId: int = 0

    parentId: int = 0

    lastFillPrice: float = 0.0

    clientId: int = 0

    whyHeld: str = ''

    mktCapPrice: float = 0.0

    PendingSubmit: ClassVar[str] = 'PendingSubmit'

    PendingCancel: ClassVar[str] = 'PendingCancel'

    PreSubmitted: ClassVar[str] = 'PreSubmitted'

    Submitted: ClassVar[str] = 'Submitted'

    ApiPending: ClassVar[str] = 'ApiPending'

    ApiCancelled: ClassVar[str] = 'ApiCancelled'

    Cancelled: ClassVar[str] = 'Cancelled'

    Filled: ClassVar[str] = 'Filled'

    Inactive: ClassVar[str] = 'Inactive'

    DoneStates: ClassVar[FrozenSet[str]] = frozenset({'ApiCancelled', 'Cancelled', 'Filled'})

    ActiveStates: ClassVar[FrozenSet[str]] = frozenset({'ApiPending', 'PendingSubmit', 'PreSubmitted', 'Submitted'})

    dict()

        Return dataclass values as dict. This is a non-recursive variant of dataclasses.asdict.

        Return type:

            dict

    nonDefaults()

        For a dataclass instance get the fields that are different from the default values and return as dict.

        Return type:

            dict

    tuple()

        Return dataclass values as tuple. This is a non-recursive variant of dataclasses.astuple.

        Return type:

            tuple

    update(*srcObjs, **kwargs)

        Update fields of the given dataclass object from zero or more dataclass source objects and/or from keyword arguments.

        Return type:

            object

class ib_insync.order.OrderState(status='', initMarginBefore='', maintMarginBefore='', equityWithLoanBefore='', initMarginChange='', maintMarginChange='', equityWithLoanChange='', initMarginAfter='', maintMarginAfter='', equityWithLoanAfter='', commission=1.7976931348623157e+308, minCommission=1.7976931348623157e+308, maxCommission=1.7976931348623157e+308, commissionCurrency='', warningText='', completedTime='', completedStatus='')[source]

    status: str = ''

    initMarginBefore: str = ''

    maintMarginBefore: str = ''

    equityWithLoanBefore: str = ''

    initMarginChange: str = ''

    maintMarginChange: str = ''

    equityWithLoanChange: str = ''

    initMarginAfter: str = ''

    maintMarginAfter: str = ''

    equityWithLoanAfter: str = ''

    commission: float = 1.7976931348623157e+308

    minCommission: float = 1.7976931348623157e+308

    maxCommission: float = 1.7976931348623157e+308

    commissionCurrency: str = ''

    warningText: str = ''

    completedTime: str = ''

    completedStatus: str = ''

    dict()

        Return dataclass values as dict. This is a non-recursive variant of dataclasses.asdict.

        Return type:

            dict

    nonDefaults()

        For a dataclass instance get the fields that are different from the default values and return as dict.

        Return type:

            dict

    tuple()

        Return dataclass values as tuple. This is a non-recursive variant of dataclasses.astuple.

        Return type:

            tuple

    update(*srcObjs, **kwargs)

        Update fields of the given dataclass object from zero or more dataclass source objects and/or from keyword arguments.

        Return type:

            object

class ib_insync.order.OrderComboLeg(price=1.7976931348623157e+308)[source]

    price: float = 1.7976931348623157e+308

    dict()

        Return dataclass values as dict. This is a non-recursive variant of dataclasses.asdict.

        Return type:

            dict

    nonDefaults()

        For a dataclass instance get the fields that are different from the default values and return as dict.

        Return type:

            dict

    tuple()

        Return dataclass values as tuple. This is a non-recursive variant of dataclasses.astuple.

        Return type:

            tuple

    update(*srcObjs, **kwargs)

        Update fields of the given dataclass object from zero or more dataclass source objects and/or from keyword arguments.

        Return type:

            object

class ib_insync.order.Trade(contract=<factory>, order=<factory>, orderStatus=<factory>, fills=<factory>, log=<factory>, advancedError='')[source]

    Trade keeps track of an order, its status and all its fills.

    Events:

            statusEvent (trade: Trade)

            modifyEvent (trade: Trade)

            fillEvent (trade: Trade, fill: Fill)

            commissionReportEvent (trade: Trade, fill: Fill, commissionReport: CommissionReport)

            filledEvent (trade: Trade)

            cancelEvent (trade: Trade)

            cancelledEvent (trade: Trade)

    contract: Contract

    order: Order

    orderStatus: OrderStatus

    fills: List[Fill]

    log: List[TradeLogEntry]

    advancedError: str = ''

    events: ClassVar = ('statusEvent', 'modifyEvent', 'fillEvent', 'commissionReportEvent', 'filledEvent', 'cancelEvent', 'cancelledEvent')

    isActive()[source]

        True if eligible for execution, false otherwise.

        Return type:

            bool

    isDone()[source]

        True if completely filled or cancelled, false otherwise.

        Return type:

            bool

    filled()[source]

        Number of shares filled.

        Return type:

            float

    remaining()[source]

        Number of shares remaining to be filled.

        Return type:

            float

    dict()

        Return dataclass values as dict. This is a non-recursive variant of dataclasses.asdict.

        Return type:

            dict

    nonDefaults()

        For a dataclass instance get the fields that are different from the default values and return as dict.

        Return type:

            dict

    tuple()

        Return dataclass values as tuple. This is a non-recursive variant of dataclasses.astuple.

        Return type:

            tuple

    update(*srcObjs, **kwargs)

        Update fields of the given dataclass object from zero or more dataclass source objects and/or from keyword arguments.

        Return type:

            object

class ib_insync.order.BracketOrder(parent, takeProfit, stopLoss)[source]

    Create new instance of BracketOrder(parent, takeProfit, stopLoss)

    parent: Order

    takeProfit: Order

    stopLoss: Order

class ib_insync.order.OrderCondition[source]

    static createClass(condType)[source]

    And()[source]

    Or()[source]

    dict()

        Return dataclass values as dict. This is a non-recursive variant of dataclasses.asdict.

        Return type:

            dict

    nonDefaults()

        For a dataclass instance get the fields that are different from the default values and return as dict.

        Return type:

            dict

    tuple()

        Return dataclass values as tuple. This is a non-recursive variant of dataclasses.astuple.

        Return type:

            tuple

    update(*srcObjs, **kwargs)

        Update fields of the given dataclass object from zero or more dataclass source objects and/or from keyword arguments.

        Return type:

            object

class ib_insync.order.PriceCondition(condType=1, conjunction='a', isMore=True, price=0.0, conId=0, exch='', triggerMethod=0)[source]

    condType: int = 1

    conjunction: str = 'a'

    isMore: bool = True

    price: float = 0.0

    conId: int = 0

    exch: str = ''

    triggerMethod: int = 0

    dict()

        Return dataclass values as dict. This is a non-recursive variant of dataclasses.asdict.

        Return type:

            dict

    nonDefaults()

        For a dataclass instance get the fields that are different from the default values and return as dict.

        Return type:

            dict

    tuple()

        Return dataclass values as tuple. This is a non-recursive variant of dataclasses.astuple.

        Return type:

            tuple

    update(*srcObjs, **kwargs)

        Update fields of the given dataclass object from zero or more dataclass source objects and/or from keyword arguments.

        Return type:

            object

class ib_insync.order.TimeCondition(condType=3, conjunction='a', isMore=True, time='')[source]

    condType: int = 3

    conjunction: str = 'a'

    isMore: bool = True

    time: str = ''

    dict()

        Return dataclass values as dict. This is a non-recursive variant of dataclasses.asdict.

        Return type:

            dict

    nonDefaults()

        For a dataclass instance get the fields that are different from the default values and return as dict.

        Return type:

            dict

    tuple()

        Return dataclass values as tuple. This is a non-recursive variant of dataclasses.astuple.

        Return type:

            tuple

    update(*srcObjs, **kwargs)

        Update fields of the given dataclass object from zero or more dataclass source objects and/or from keyword arguments.

        Return type:

            object

class ib_insync.order.MarginCondition(condType=4, conjunction='a', isMore=True, percent=0)[source]

    condType: int = 4

    conjunction: str = 'a'

    isMore: bool = True

    percent: int = 0

    dict()

        Return dataclass values as dict. This is a non-recursive variant of dataclasses.asdict.

        Return type:

            dict

    nonDefaults()

        For a dataclass instance get the fields that are different from the default values and return as dict.

        Return type:

            dict

    tuple()

        Return dataclass values as tuple. This is a non-recursive variant of dataclasses.astuple.

        Return type:

            tuple

    update(*srcObjs, **kwargs)

        Update fields of the given dataclass object from zero or more dataclass source objects and/or from keyword arguments.

        Return type:

            object

class ib_insync.order.ExecutionCondition(condType=5, conjunction='a', secType='', exch='', symbol='')[source]

    condType: int = 5

    conjunction: str = 'a'

    secType: str = ''

    exch: str = ''

    symbol: str = ''

    dict()

        Return dataclass values as dict. This is a non-recursive variant of dataclasses.asdict.

        Return type:

            dict

    nonDefaults()

        For a dataclass instance get the fields that are different from the default values and return as dict.

        Return type:

            dict

    tuple()

        Return dataclass values as tuple. This is a non-recursive variant of dataclasses.astuple.

        Return type:

            tuple

    update(*srcObjs, **kwargs)

        Update fields of the given dataclass object from zero or more dataclass source objects and/or from keyword arguments.

        Return type:

            object

class ib_insync.order.VolumeCondition(condType=6, conjunction='a', isMore=True, volume=0, conId=0, exch='')[source]

    condType: int = 6

    conjunction: str = 'a'

    isMore: bool = True

    volume: int = 0

    conId: int = 0

    exch: str = ''

    dict()

        Return dataclass values as dict. This is a non-recursive variant of dataclasses.asdict.

        Return type:

            dict

    nonDefaults()

        For a dataclass instance get the fields that are different from the default values and return as dict.

        Return type:

            dict

    tuple()

        Return dataclass values as tuple. This is a non-recursive variant of dataclasses.astuple.

        Return type:

            tuple

    update(*srcObjs, **kwargs)

        Update fields of the given dataclass object from zero or more dataclass source objects and/or from keyword arguments.

        Return type:

            object

class ib_insync.order.PercentChangeCondition(condType=7, conjunction='a', isMore=True, changePercent=0.0, conId=0, exch='')[source]

    condType: int = 7

    conjunction: str = 'a'

    isMore: bool = True

    changePercent: float = 0.0

    conId: int = 0

    exch: str = ''

    dict()

        Return dataclass values as dict. This is a non-recursive variant of dataclasses.asdict.

        Return type:

            dict

    nonDefaults()

        For a dataclass instance get the fields that are different from the default values and return as dict.

        Return type:

            dict

    tuple()

        Return dataclass values as tuple. This is a non-recursive variant of dataclasses.astuple.

        Return type:

            tuple

    update(*srcObjs, **kwargs)

        Update fields of the given dataclass object from zero or more dataclass source objects and/or from keyword arguments.

        Return type:

            object

